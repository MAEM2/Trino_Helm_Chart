{{- if gt (int .Values.server.workers) 0 }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "trino.worker" . }}
  labels:
    app: {{ template "trino.name" . }}
    chart: {{ template "trino.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: worker
data:
  node.properties: |
    node.environment={{ .Values.server.node.environment }}
    node.data-dir={{ .Values.server.node.dataDir }}
    plugin.dir={{ .Values.server.node.pluginDir }}

  jvm.config: |
    -server
    -Xmx{{ .Values.server.jvm.maxHeapSize }}
    -XX:+{{ .Values.server.jvm.gcMethod.type }}
    -XX:G1HeapRegionSize={{ .Values.server.jvm.gcMethod.g1.heapRegionSize }}
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -Djdk.attach.allowAttachSelf=true
    {{ if .Values.exporters.jmx.enabled }}
    -Dcom.sun.management.jmxremote=true
    -Dcom.sun.management.jmxremote.local.only=false
    -Dcom.sun.management.jmxremote.authenticate=false
    -Dcom.sun.management.jmxremote.ssl=false
    -Dcom.sun.management.jmxremote.port={{ .Values.server.jmx.registryPort }}
    -Dcom.sun.management.jmxremote.rmi.port={{ .Values.server.jmx.serverPort }}
    {{ end }}
    {{ range $value := .Values.server.jvm.additional_params }}
    {{ $value }}
  {{end}}

  config.properties: |
    coordinator=false
    http-server.http.port={{ .Values.server.config.http.port }}
    query.max-memory={{ .Values.server.config.query.maxMemory }}
    query.max-total-memory={{ .Values.server.config.query.maxTotalMemory }}
    query.max-memory-per-node={{ .Values.server.config.query.maxMemoryPerNode }}
    query.max-total-memory-per-node={{ .Values.server.config.query.maxTotalMemoryPerNode }}
    discovery.uri=http://{{ template "trino.fullname" . }}:{{ .Values.server.config.http.port }}

    {{ if .Values.exporters.jmx.enabled }}
    jmx.rmiregistry.port={{ .Values.server.jmx.registryPort }}
    jmx.rmiserver.port={{ .Values.server.jmx.serverPort }}
    {{ end }}
    {{ range $key,$value := .Values.server.config.additional_params }}
    {{ $key }}={{ $value }}
  {{end}}

  log.properties: |
    io.trino={{ .Values.server.log.trino.level }}

  health_check.sh: |
    #!/bin/bash 
    curl --silent {{ template "trino.fullname" . }}:{{ .Values.server.config.http.port }}/v1/node | tr "," "\n" | grep --silent $(hostname -i)

---
{{- end }}
