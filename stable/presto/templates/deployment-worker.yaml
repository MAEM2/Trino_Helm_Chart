{{- if gt (int .Values.server.workers) 0 }}

{{- if not (eq .Values.alluxio.worker.enabled false) -}}

{{- $shortCircuitEnabled := .Values.alluxio.shortCircuit.enabled }}
{{- $needDomainSocketVolume := and $shortCircuitEnabled (eq .Values.alluxio.shortCircuit.policy "uuid") }}
{{- $hostNetwork := .Values.alluxio.worker.hostNetwork }}
# {{- $hostPID := .Values.worker.hostPID }}
{{- $fullName := include "alluxio.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "trino.worker" . }}
  labels:
    app: {{ template "trino.name" . }}
    chart: {{ template "trino.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: worker
    microservice: trino-worker
spec:
  replicas: {{ .Values.server.workers }}
  selector:
    matchLabels:
      app: {{ template "trino.name" . }}
      release: {{ .Release.Name }}
      component: worker
  template:
    metadata:
      labels:
        app: {{ template "trino.name" . }}
        release: {{ .Release.Name }}
        component: worker
        microservice: trino-worker
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "trino.worker" . }}
        - name: config-volume-hive
          configMap:
            name: {{ template "trino.hive" . }}
        {{ if .Values.exporters.jmx.enabled }}
        - name: config-jmx-exporter
          configMap:
            name: {{ template "trino.jmx-exporter" . }}
        {{ end }}
        {{- if $needDomainSocketVolume }}
        {{- include "alluxio.worker.shortCircuit.volume" . }}
        {{- end }}

        {{- if .Values.alluxio.tieredstore }}
        {{- include "alluxio.worker.tieredstoreVolumes" . }}
        {{- end}}

      containers:
        - name: {{ .Chart.Name }}-worker
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - mountPath: {{ .Values.server.config.path }}
              name: config-volume
            - mountPath: {{ .Values.server.config.pathCatalog }}
              name: config-volume-hive
          env:
            - name: JAVA_OPTS
              value: -Dcom.amazonaws.sdk.disableCertChecking=true
            - name: JAVA_TOOL_OPTIONS
              value: -Dcom.amazonaws.sdk.disableCertChecking=true
            - name: _JAVA_OPTIONS
              value: -Dcom.amazonaws.sdk.disableCertChecking=true
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.storagegrid.secret }}
                  key: s3-access-key
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.storagegrid.secret }}
                  key: s3-secret-key
          ports:
            - name: http
              containerPort: {{ .Values.server.config.http.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
          readinessProbe:
            httpGet:
              path: /v1/info
              port: http
          lifecycle:
            preStop:
              exec:
                command: [
                  "sh", "-c",
                  "curl -v  -H \"X-Trino-User: admin\" -X PUT -d '\"SHUTTING_DOWN\"' -H \"Content-type: application/json\" http://localhost:8080/v1/info/state && sleep 10"
                ]
          resources:
            limits:
              cpu: {{ .Values.resources.worker.limits.cpu }}
              memory: {{ .Values.resources.worker.limits.memory }}
            requests:
              cpu: {{ .Values.resources.worker.requests.cpu }}
              memory: {{ .Values.resources.worker.requests.memory }}

  {{ if .Values.exporters.jmx.enabled }}
        - name: jmx-exporter
          image: "{{ .Values.exporters.jmx.image.repository }}:{{ .Values.exporters.jmx.image.tag }}"
          imagePullPolicy: {{ .Values.exporters.jmx.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.exporters.jmx.port }}
              protocol: TCP
              name: exporter
          livenessProbe:
            httpGet:
              path: /metrics
              port: exporter
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 60
            failureThreshold: 8
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /metrics
              port: exporter
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 60
            failureThreshold: 8
            successThreshold: 1
          env:
            - name: SERVICE_PORT
              value: {{ .Values.exporters.jmx.port | quote }}
            {{- with .Values.exporters.jmx.env }}
            {{- range $key, $value := . }}
            - name: {{ $key | upper | replace "." "_" }}
              value: {{ $value | quote }}
          {{- end }}
          {{- end }}
          resources:
            limits:
              cpu: {{ .Values.exporters.jmx.resources.worker.limits.cpu }}
              memory: {{ .Values.exporters.jmx.resources.worker.limits.memory }}
            requests:
              cpu: {{ .Values.exporters.jmx.resources.worker.requests.cpu }}
              memory: {{ .Values.exporters.jmx.resources.worker.requests.memory }}
          volumeMounts:
            - name: config-jmx-exporter
              mountPath: /opt/jmx_exporter/config.yml
              subPath: config.yml
          {{- end }}

#        alluxio container
        - name: alluxio-worker
          image: {{ .Values.alluxio.image }}:{{ .Values.alluxio.imageTag }}
          imagePullPolicy: {{ .Values.alluxio.imagePullPolicy }}
          securityContext:
            runAsUser: {{ .Values.alluxio.worker.user }}
      #             runAsGroup: {{ .Values.group }}
          {{- if .Values.alluxio.worker.resources  }}
          {{ include "alluxio.worker.resources" . | indent 10 }}
          {{- end }}
          command: [ "/entrypoint.sh"]
          {{- if .Values.alluxio.worker.args }}
          args:
          {{ toYaml .Values.alluxio.worker.args | trim | indent 12 }}
          {{- end }}
          env:
            - name: JAVA_OPTS
              value: -Dcom.amazonaws.sdk.disableCertChecking=true
            - name: JAVA_TOOL_OPTIONS
              value: -Dcom.amazonaws.sdk.disableCertChecking=true
            - name: _JAVA_OPTIONS
              value: -Dcom.amazonaws.sdk.disableCertChecking=true
            - name: ALLUXIO_WORKER_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: ALLUXIO_WORKER_CONTAINER_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          envFrom:
            - configMapRef:
                name: {{ template "alluxio.fullname" . }}-config
          readinessProbe:
            tcpSocket:
              port: rpc
            initialDelaySeconds: {{ .Values.alluxio.worker.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.alluxio.worker.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.alluxio.worker.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.alluxio.worker.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.alluxio.worker.readinessProbe.successThreshold }}
          livenessProbe:
            tcpSocket:
              port: rpc
            initialDelaySeconds: {{ .Values.alluxio.worker.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.alluxio.worker.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.alluxio.worker.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.alluxio.worker.livenessProbe.failureThreshold }}
          {{- if .Values.alluxio.worker.startupProbe }}
          startupProbe:
            tcpSocket:
              port: rpc
            initialDelaySeconds: {{ .Values.alluxio.worker.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.alluxio.worker.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.alluxio.worker.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.alluxio.worker.startupProbe.failureThreshold }}
          {{- end}}
          ports:
            - containerPort: {{ .Values.alluxio.worker.ports.rpc }}
              name: rpc
            - containerPort: {{ .Values.alluxio.worker.ports.web }}
              name: web
          volumeMounts:
            - name: alluxio-domain
              mountPath: /opt/domain

            {{- if .Values.alluxio.tieredstore -}}
              {{- include "alluxio.worker.tieredstoreVolumeMounts" . }}
            {{- end -}}

        - name: alluxio-job-worker
          image: {{ .Values.alluxio.image }}:{{ .Values.alluxio.imageTag }}
          imagePullPolicy: {{ .Values.alluxio.imagePullPolicy }}
          {{- if .Values.alluxio.jobWorker.resources  }}
          {{ include "alluxio.jobWorker.resources" . | indent 10 }}
          {{- end }}
          command: [ "/entrypoint.sh"]
          {{- if .Values.alluxio.jobWorker.args }}
          args:
          {{ toYaml .Values.alluxio.jobWorker.args | trim | indent 12 }}
          {{- end }}
          env:
            - name: JAVA_OPTS
              value: -Dcom.amazonaws.sdk.disableCertChecking=true
            - name: JAVA_TOOL_OPTIONS
              value: -Dcom.amazonaws.sdk.disableCertChecking=true
            - name: _JAVA_OPTIONS
              value: -Dcom.amazonaws.sdk.disableCertChecking=true
            - name: ALLUXIO_WORKER_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: ALLUXIO_WORKER_CONTAINER_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          {{- range $key, $value := .Values.alluxio.jobWorker.env }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "alluxio.fullname" . }}-config
          readinessProbe:
            tcpSocket:
              port: job-rpc
            initialDelaySeconds: {{ .Values.alluxio.jobWorker.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.alluxio.jobWorker.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.alluxio.jobWorker.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.alluxio.jobWorker.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.alluxio.jobWorker.readinessProbe.successThreshold }}
          livenessProbe:
            tcpSocket:
              port: job-rpc
            initialDelaySeconds: {{ .Values.alluxio.jobWorker.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.alluxio.jobWorker.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.alluxio.jobWorker.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.alluxio.jobWorker.livenessProbe.failureThreshold }}
          {{- if .Values.alluxio.jobWorker.startupProbe }}
          startupProbe:
            tcpSocket:
              port: job-rpc
            initialDelaySeconds: {{ .Values.alluxio.jobWorker.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.alluxio.jobWorker.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.alluxio.jobWorker.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.alluxio.jobWorker.startupProbe.failureThreshold }}
          {{- end}}
          ports:
            - containerPort: {{ .Values.alluxio.jobWorker.ports.rpc }}
              name: job-rpc
            - containerPort: {{ .Values.alluxio.jobWorker.ports.data }}
              name: job-data
            - containerPort: {{ .Values.alluxio.jobWorker.ports.web }}
              name: job-web
          volumeMounts:
            - name: alluxio-domain
              mountPath: /opt/domain

            {{- if .Values.alluxio.tieredstore }}
            {{- include "alluxio.worker.tieredstoreVolumeMounts" . }}
            {{- end }}

    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

{{- end }}
