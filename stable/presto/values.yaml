server:
  workers: 4
  node:
    environment: production
    dataDir: /data/trino
    pluginDir: /data/trino/plugin
  log:
    trino:
      level: INFO
  config:
    path: /etc/trino
    pathCatalog: /etc/trino/catalog
    http:
      port: 8080
    https:
      enabled: true
      port: 8443
    query:
      maxMemory: "20GB"
      maxTotalMemory: "32GB"
      maxMemoryPerNode: "6GB"
      maxTotalMemoryPerNode: "10GB"
  jvm:
    maxHeapSize: "24G"
    gcMethod:
      type: "UseG1GC"
      g1:
        heapRegionSize: "32M"
  jmx:
    registryPort: 9080
    serverPort: 9081

image:
  repository: trinodb/trino
  tag: 356
  pullPolicy: IfNotPresent
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000


service:
  type: ClusterIP
  externalType: NodePort

resources:
  coordinator:
    limits:
      cpu: 3000m
      memory: 30000Mi
    requests:
      cpu: 2000m
      memory: 24000Mi
  worker:
    limits:
      cpu: 2000m
      memory: 30000Mi
    requests:
      cpu: 1000m
      memory: 28000Mi

nodeSelector: {}

tolerations: []

affinity: {}

hive:
  metastore:
    uri: thrift://metastore-headless:9083
  s3:
    endpoint: https://host:port
    ssl:
      enabled: true
    max-connections: 100
storagegrid:
  secret: dma-dev-storagegrid-access-key
  accessKey:
  secretKey:
passwordfile:
  secret: trino-passworddb
  mountpath: /usr/lib/trino/etc
  filepath: /usr/lib/trino/etc/password.db
keystore:
  secret: trino-keystore
  mountpath: /usr/lib/trino/etc/keystore
  filepath: /usr/lib/trino/etc/keystore/keystore.jks
  key: key
exporters:
  jmx:
    enabled: true
    image:
      repository: sscaling/jmx-prometheus-exporter
      tag: 0.3.0
      pullPolicy: IfNotPresent
    port: 9999
    env: {}
    resources:
      coordinator:
        limits:
          cpu: 3000m
          memory: 10000Mi
        requests:
          cpu: 1000m
          memory: 8000Mi
      worker:
        limits:
          cpu: 1000m
          memory: 3000Mi
        requests:
          cpu: 800m
          memory: 2000Mi

    config:
      jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:9080/jmxrmi
      lowercaseOutputName: true
      lowercaseOutputLabelNames: true

      whitelistObjectNames:
      - 'trino.execution:*'
      - 'trino.execution.executor:*'
      - 'trino.execution.resourcegroups:*'
      - 'trino.failuredetector:*'
      - 'trino.memory:*'
      - 'trino.metadata:*'
      - 'trino.security:*'
      - 'trino.sql.gen:*'
      - 'trino.sql.planner.iterative:*'
      - 'trino.sql.planner.optimizations:*'
      rules:
        # Trino execution stats {{{
        - pattern: 'trino.execution<name=ClusterSizeMonitor><>RequiredWorkers'
          name: 'trino_cluster_size_monitor_required_workers'
          help: 'Number of workers required in cluster'
          type: GAUGE

        # Query counts {{{
        - pattern: 'trino.execution<name=QueryManager><>(Abandoned|Canceled|Completed|Failed|Started|Submitted)Queries.TotalCount'
          name: 'trino_query_manager_queries_total'
          help: 'Total number of queries'
          type: COUNTER
          labels:
            state: '$1'
        - pattern: 'trino.execution<name=QueryManager><>(Queued|Running)Queries'
          name: 'trino_query_manager_queries'
          help: 'Number of queries currently in the labelled state'
          type: GAUGE
          labels:
            state: '$1'
        # }}}

        - pattern: 'trino.execution<name=QueryManager><>ConsumedCpuTimeSecs.TotalCount'
          name: 'trino_query_manager_consumed_cpu_time_seconds_total'
          help: 'Total CPU time consumed across all queries in seconds'
          type: COUNTER
        - pattern: 'trino.execution<name=QueryManager><>ConsumedInputBytes.TotalCount'
          name: 'trino_query_manager_consumed_input_bytes_total'
          help: 'Total input bytes consumed across all queries in bytes'
          type: COUNTER
        - pattern: 'trino.execution<name=QueryManager><>ConsumedInputRows.TotalCount'
          name: 'trino_query_manager_consumed_input_rows_total'
          help: 'Total number of input rows consumed across all queries'
          type: COUNTER

        # CPU and Wall input byte rate histograms/summaries {{{
        - pattern: 'trino.execution<name=QueryManager><>(CpuInputByte|WallInputBytes)Rate.AllTime.(Avg|Min|Max)'
          name: 'trino_query_manager_$1_rate_$2'
          help: '$2 rate $1'
          type: GAUGE
        - pattern: 'trino.execution<name=QueryManager><>(CpuInputByte|WallInputBytes)Rate.AllTime.P(\d+)'
          name: 'trino_query_manager_$1_rate'
          help: '$1 rate for the labelled quantile'
          type: GAUGE
          labels:
            quantile: '0.$2'
        - pattern: 'trino.execution<name=QueryManager><>(CpuInputByte|WallInputBytes)Rate.AllTime.Count'
          name: 'trino_query_manager_$1_rate_count'
          help: '$1 rate count'
          type: COUNTER
        # }}}

        # Execution and queued time histograms/summaries {{{
        - pattern: 'trino.execution<name=QueryManager><>(Execution|Queued)Time.AllTime.(Avg|Min|Max)'
          valueFactor: 0.001
          name: 'trino_query_manager_$1_seconds_$2'
          help: '$2 $1 time in seconds'
          type: GAUGE
        - pattern: 'trino.execution<name=QueryManager><>(Execution|Queued)Time.AllTime.P(\d+)'
          valueFactor: 0.001
          name: 'trino_query_manager_$1_seconds'
          help: '$1 time in seconds for the labelled quantile'
          type: GAUGE
          labels:
            quantile: '0.$2'
        - pattern: 'trino.execution<name=QueryManager><>(Execution|Queued)Time.AllTime.Count'
          valueFactor: 0.001
          name: 'trino_query_manager_$1_seconds_count'
          help: '$1 time count'
          type: COUNTER
        # }}}

        - pattern: 'trino.execution<name=QueryManager><>(External|InsufficientResources|Internal|UserError)Failures.TotalCount'
          name: 'trino_query_manager_failures_total'
          help: 'Total number of failures with the labelled type'
          type: COUNTER
          labels:
            type: '$1'
        # }}}

        # Trino executor stats {{{
        # MLFQ stats {{{
        - pattern: 'trino.execution.executor<name=MultilevelSplitQueue><>Level(\d)Time'
          valueFactor: 0.000000001
          name: 'trino_multilevel_split_queue_level_time_seconds_total'
          help: 'Total time spent in the labelled level of the MLFQ in seconds'
          type: COUNTER
          labels:
            level: '$1'
        - pattern: 'trino.execution.executor<name=MultilevelSplitQueue><>SelectedCountLevel(\d).TotalCount'
          name: 'trino_multilevel_split_queue_level_selected_total'
          help: 'Total number of times the labelled level was selected'
          type: COUNTER
          labels:
            level: '$1'
        # }}}

        # BlockedQuantaWallTime, SplitQueuedTime, SplitWallTime and UnblockedQuantaWallTime histograms {{{
        - pattern: 'trino.execution.executor<name=TaskExecutor><>(BlockedQuantaWallTime|SplitQueuedTime|SplitWallTime|UnblockedQuantaWallTime).AllTime.(Avg|Min|Max)'
          valueFactor: 0.000001
          name: 'trino_task_executor_$1_seconds_$2'
          help: '$2 $1 in seconds'
          type: GAUGE
        - pattern: 'trino.execution.executor<name=TaskExecutor><>(BlockedQuantaWallTime|SplitQueuedTime|SplitWallTime|UnblockedQuantaWallTime).AllTime.P(\d+)'
          valueFactor: 0.000001
          name: 'trino_task_executor_$1_seconds'
          help: '$1 in seconds for the labelled quantile'
          type: GAUGE
          labels:
            quantile: '0.$2'
        - pattern: 'trino.execution.executor<name=TaskExecutor><>(BlockedQuantaWallTime|SplitQueuedTime|SplitWallTime|UnblockedQuantaWallTime).AllTime.Count'
          valueFactor: 0.000001
          name: 'trino_task_executor_$1_seconds_count'
          help: '$1 in seconds count'
          type: COUNTER
        # }}}

        - pattern: 'trino.execution.executor<name=TaskExecutor><>(Blocked|Intermediate|Running|Waiting)Splits'
          name: 'trino_task_executor_splits'
          help: 'Number of splits in the labelled state'
          type: GAUGE
          labels:
            state: '$1'
        - pattern: 'trino.execution.executor<name=TaskExecutor><>TotalSplits'
          name: 'trino_task_executor_splits_total'
          help: 'Total number of splits'
          type: COUNTER

        # Intermediate and Leaf splits CPU, scheduled, wait and wall times histograms {{{
        - pattern: 'trino.execution.executor<name=TaskExecutor><>(IntermediateSplitCpu|IntermediateSplitScheduled|IntermediateSplitWait|IntermediateSplitWall|LeafSplitCpu|LeafSplitScheduled|LeafSplitWait|LeafSplitWall)Time.(Avg|Min|Max)'
          valueFactor: 0.000001
          name: 'trino_task_executor_$1_seconds_$2'
          help: '$2 $1 in seconds'
          type: GAUGE
        - pattern: 'trino.execution.executor<name=TaskExecutor><>(IntermediateSplitCpu|IntermediateSplitScheduled|IntermediateSplitWait|IntermediateSplitWall|LeafSplitCpu|LeafSplitScheduled|LeafSplitWait|LeafSplitWall)Time.P(\d+)'
          valueFactor: 0.000001
          name: 'trino_task_executor_$1_seconds'
          help: '$1 in seconds for the labelled quantile'
          type: GAUGE
          labels:
            quantile: '0.$2'
        - pattern: 'trino.execution.executor<name=TaskExecutor><>(IntermediateSplitCpu|IntermediateSplitScheduled|IntermediateSplitWait|IntermediateSplitWall|LeafSplitCpu|LeafSplitScheduled|LeafSplitWait|LeafSplitWall)Time.Count'
          valueFactor: 0.000001
          name: 'trino_task_executor_$1_seconds_count'
          help: '$1 in seconds count'
          type: COUNTER
        # }}}
        # }}}

        # Trino resource group stats {{{
        - pattern: 'trino.execution.resourcegroups<type=InternalResourceGroup, name=(.+)><>(HardConcurrencyLimit|MaxQueuedQueries|QueuedQueries|RunningQueries|WaitingQueuedQueries)'
          name: 'trino_resourcegroups_$2'
          help: '$2 for the labelled resource group name'
          type: GAUGE
          labels:
            group: '$1'
        # }}}

        # Trino cluster size {{{
        - pattern: 'trino.failuredetector<name=HeartbeatFailureDetector><>(Active|Failed|Total)Count'
          name: 'trino_failuredetector_$1_nodes'
          help: 'Number of $1 nodes observed by the failure detector'
          type: GAUGE
        # }}}

        # Trino memory stats {{{
        - pattern: 'trino.memory<name=ClusterMemoryManager><>Cluster(MemoryBytes|TotalMemoryReservation|UserMemoryReservation)'
          name: 'trino_cluster_memory_manager_$1_bytes'
          help: 'Cluster $1 in bytes'
          type: GAUGE
        - pattern: 'trino.memory<name=ClusterMemoryManager><>TotalAvailableProcessors'
          name: 'trino_cluster_memory_manager_available_processors'
          help: 'Cluster total available CPU cores'
          type: GAUGE
        - pattern: 'trino.memory<name=ClusterMemoryManager><>(NumberOfLeakedQueries|QueriesKilledDueToOutOfMemory)'
          name: 'trino_cluster_memory_manager_$1_total'
          help: 'Total $1'
          type: COUNTER

        # Cluster wide memory pools
        - pattern: 'trino.memory<type=ClusterMemoryPool, name=(.+)><>(AssignedQueries|BlockedNodes|Nodes)'
          name: 'trino_cluster_memory_pool_$2'
          help: '$1 in the labelled cluster memory pool'
          type: GAUGE
          labels:
            pool: '$1'
        - pattern: 'trino.memory<type=ClusterMemoryPool, name=(.+)><>(Free|Reserved|ReservedRevocable|Total)DistributedBytes'
          name: 'trino_cluster_memory_pool_$2_distributed_bytes'
          help: '$1 distributed memory in the labelled cluster memory pool in bytes'
          type: GAUGE
          labels:
            pool: '$1'

        # Local memory
        - pattern: 'trino.memory<type=MemoryPool, name=(.+)><>(Free|Max|Reserved|ReservedRevocable)Bytes'
          name: 'trino_memory_pool_$2_bytes'
          help: '$1 memory in the labelled memory pool in bytes'
          type: GAUGE
          labels:
            pool: '$1'
        # }}}

        # Trino metadata {{{
        - pattern: 'trino.metadata<name=DiscoveryNodeManager><>(Active|Inactive|ShuttingDown)NodeCount'
          name: 'trino_metadata_$1_nodes'
          help: 'Number of $1 nodes as seen by discovery service'
          type: GAUGE
        # }}}
        # Trino security stats {{{
        - pattern: 'trino.security<name=AccessControlManager><>(.+).TotalCount'
          name: 'trino_security_$1_count_total'
          help: 'Number of $1'
          type: COUNTER
        # }}}

        # SQL generator stats {{{
        - pattern: 'trino.sql.gen<name=(.+)><>(.+).(Hit|Miss)Rate'
          name: 'trino_sql_gen_$1_$2_$3_rate'
          type: GAUGE
        - pattern: 'trino.sql.gen<name=(.+)><>(.+).RequestCount'
          name: 'trino_sql_gen_$1_$2_request_count'
          type: COUNTER
        # }}}

        # SQL Planner stats {{{
        - pattern: 'trino.sql.planner.(.+)<name=(.+), rule=(.+)><>(Failures|Hits)'
          name: 'trino_sql_planner_$2_$4'
          type: COUNTER
          labels:
            rule: '$3'

        - pattern: 'trino.sql.planner.(.+)<name=(.+), rule=(.+)><>Time.(Avg|Min|Max)'
          valueFactor: 0.000001
          name: 'trino_sql_planner_$2_seconds_$4'
          type: GAUGE
          labels:
            rule: '$3'
        - pattern: 'trino.sql.planner.(.+)<name=(.+), rule=(.+)><>Time.P(\d+)'
          valueFactor: 0.000001
          name: 'trino_sql_planner_$2_seconds'
          type: GAUGE
          labels:
            rule: '$3'
            quantile: '0.$4'
        - pattern: 'trino.sql.planner.(.+)<name=(.+), rule=(.+)><>Time.Count'
          name: 'trino_sql_planner_$2_seconds_count'
          type: COUNTER
          labels:
            rule: '$3'
            # }}}
      startDelaySeconds: 30
